import React, { useEffect, useState, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Wheel from '../../components/Wheel/Wheel';
import './WheelPage.css';

const API_BASE_URL = 'https://lottery-server-waif.onrender.com/wheel';

export default function WheelPage() {
  const { id: wheel_id } = useParams();
  const navigate = useNavigate();

  const [participants, setParticipants] = useState([]);
  const [wheelSize, setWheelSize] = useState(0);
  const [winner, setWinner] = useState(null);
  const [completedAt, setCompletedAt] = useState(null);
  const [loading, setLoading] = useState(true);
  const [animStarted, setAnimStarted] = useState(false);
  const timerRef = useRef(null);
  const [status, setStatus] = useState('active'); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é active

  const fetchData = async () => {
    console.log('üöÄ fetchData start');
    try {
      setLoading(true);

      // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ wheel_id
      const partRes = await fetch(`${API_BASE_URL}/${wheel_id}/participants`);
      if (!partRes.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${partRes.status}`);
      const partData = await partRes.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${partData.participants?.length || 0}`);

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ user_id –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ joined_at
      const participantsRaw = partData.participants || [];
      const uniqueMap = new Map();
      participantsRaw.forEach(p => {
        if (!uniqueMap.has(p.user_id)) {
          uniqueMap.set(p.user_id, p);
        } else {
          const existing = uniqueMap.get(p.user_id);
          if (new Date(p.joined_at) < new Date(existing.joined_at)) {
            uniqueMap.set(p.user_id, p);
          }
        }
      });
      const uniqueParticipants = Array.from(uniqueMap.values())
        .sort((a, b) => new Date(a.joined_at) - new Date(b.joined_at))
        .map(p => {
          console.log(`üë§ –£—á–∞—Å—Ç–Ω–∏–∫: ${p.username || `user${p.user_id}`}`);
          return { username: p.username || `user${p.user_id}` };
        });

      setParticipants(uniqueParticipants);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–µ—Å–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å wheelSize
      const wheelRes = await fetch(`${API_BASE_URL}/${wheel_id}`);
      if (!wheelRes.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–µ—Å–∞: ${wheelRes.status}`);
      const wheelData = await wheelRes.json();
      console.log(`üé° –ö–æ–ª–µ—Å–æ –Ω–∞–π–¥–µ–Ω–æ. –†–∞–∑–º–µ—Ä: ${wheelData.size}`);
      setWheelSize(wheelData.size || 0);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—è) –ø–æ wheel_id
      const resultRes = await fetch(`${API_BASE_URL}/results`);
      if (!resultRes.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${resultRes.status}`);
      const resultData = await resultRes.json();

      console.log('üé≤ –í—Å–µ wheel_id –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:', resultData.results.map(r => r.wheel_id));
      console.log('üîç –¢–µ–∫—É—â–∏–π wheel_id:', wheel_id);

      const thisResult = resultData.results.find(r => String(r.wheel_id) === String(wheel_id));
      if (thisResult) {
        const winnerNormalized = thisResult.winner.replace(/^@/, ''); // —É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        console.log(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerNormalized} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${thisResult.completed_at})`);
        setWinner(winnerNormalized || null);
        setCompletedAt(thisResult.completed_at || null);
        setStatus('completed');
      } else {
        console.log('‚öôÔ∏è –ö–æ–ª–µ—Å–æ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
        setWinner(null);
        setCompletedAt(null);
        setStatus('active');
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–µ—Å–∞:', e);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–µ—Å–∞: ${e.message || e}`);
    } finally {
      setLoading(false);
      console.log('üöÄ fetchData end');
    }
  };

  useEffect(() => {
    fetchData();

    const intervalId = setInterval(() => {
      fetchData();
    }, 5000); // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(intervalId);
  }, [wheel_id]);

  // –¢–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ completedAt
  useEffect(() => {
    if (!completedAt || !winner) return;

    const now = Date.now();
    const completedTime = new Date(completedAt).getTime();
    const elapsed = now - completedTime;
    const delay = 60000 - elapsed; // 60 —Å–µ–∫—É–Ω–¥

    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–∞–¥–µ—Ä–∂–∫–∞: ${delay} –º—Å`);

    if (delay <= 0) {
      setAnimStarted(true);
    } else {
      timerRef.current = setTimeout(() => {
        setAnimStarted(true);
      }, delay);
    }

    return () => clearTimeout(timerRef.current);
  }, [completedAt, winner]);

  const handleAnimFinish = () => {
    alert(`üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`);
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="wheel-page-wrapper">
      <h2>–ö–æ–ª–µ—Å–æ ‚Ññ{wheel_id}</h2>
      <p>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants.length}</p>
      <p>–°—Ç–∞—Ç—É—Å: {status}</p>
      <Wheel
        participants={participants}
        wheelSize={wheelSize}
        winnerUsername={winner}
        spinDuration={Math.min(15000 + participants.length * 1000, 25000)}
        onFinish={handleAnimFinish}
        key={animStarted ? 'spin' : 'stop'}
      />
      <button onClick={() => navigate('/')}>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
    </div>
  );
}
