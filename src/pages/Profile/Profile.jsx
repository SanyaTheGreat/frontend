import { useEffect, useState } from 'react';
import './Profile.css';
import { TonConnectButton, useTonConnectUI, useTonWallet } from '@tonconnect/ui-react';
import { toUserFriendlyAddress } from '@tonconnect/sdk';
import { beginCell } from '@ton/ton';

// –í Telegram WebApp –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Buffer, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
if (typeof window !== 'undefined' && !window.Buffer) {
  window.Buffer = Buffer;
}

export default function Profile() {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [referrals, setReferrals] = useState(null);
  const [purchases, setPurchases] = useState([]);
  const [loading, setLoading] = useState(true);

  const [tonConnectUI] = useTonConnectUI();
  const tonWallet = useTonWallet();

  const fetchProfile = async (telegram_id) => {
    console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const [profileData, referralData, sellsData] = await Promise.all([
      fetch(`https://lottery-server-waif.onrender.com/users/profile/${telegram_id}`).then(res => res.json()),
      fetch(`https://lottery-server-waif.onrender.com/users/referrals/${telegram_id}`).then(res => res.json()),
      fetch(`https://lottery-server-waif.onrender.com/users/sells/${telegram_id}`).then(res => res.json()),
    ]);

    setProfile(profileData);
    setReferrals(referralData);
    setPurchases(sellsData);
    setLoading(false);
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', profileData);
  };

  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    const telegramUser = tg?.initDataUnsafe?.user;

    if (!telegramUser || !telegramUser.id) {
      console.warn('Telegram user not found');
      return;
    }

    console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', telegramUser);
    setUser(telegramUser);
    fetchProfile(telegramUser.id);
  }, []);

  useEffect(() => {
    if (!tonWallet?.account?.address || !user || !profile) return;

    const walletFromServer = profile.wallet;
    const rawAddress = tonWallet.account.address;
    const friendlyAddress = toUserFriendlyAddress(rawAddress, tonWallet.account.chain === 'testnet');

    if (friendlyAddress && friendlyAddress !== walletFromServer) {
      handleWalletUpdate(friendlyAddress);
    }
  }, [tonWallet, user, profile]);

  const handleWalletUpdate = async (walletValue) => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º TON-–∫–æ—à–µ–ª–µ–∫:', walletValue);
    await fetch(`https://lottery-server-waif.onrender.com/users/wallet`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ telegram_id: user.id, wallet: walletValue }),
    });

    fetchProfile(user.id);
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è payload —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –¥–ª—è TON
  const createCommentPayload = (comment) => {
    return beginCell()
      .storeUint(0, 32)         // 32-–±–∏—Ç–Ω—ã–π opcode –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è = 0
      .storeStringTail(comment) // —Å–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      .endCell()
      .toBoc()
      .toString('base64');
  };

  const handleCopyRefLink = () => {
    navigator.clipboard.writeText(`https://t.me/FightForGift_bot?start=${user.id}`);
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');
  };

  if (loading || !user) {
    return <p className="profile-wrapper">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>;
  }

  return (
    <div className="profile-wrapper">
      <div className="profile-block">
        <div className="profile-title">üë§ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!</div>
        <div className="profile-row">@{user.username}</div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON Connect</div>
        <div className="profile-row ton-button-row">
          <TonConnectButton />
        </div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üéü TON</div>
        <div className="profile-row">{profile?.tickets ?? '‚Äî'}</div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ TON</div>
        <div className="profile-row">
          <button
            onClick={async () => {
              const amountInput = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ TON (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):');
              const amount = parseFloat(amountInput);

              if (isNaN(amount) || amount <= 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
                return;
              }

              const nanoTON = (amount * 1e9).toFixed(0);
              const comment = `tg:${user.id}`;
              const payload = createCommentPayload(comment);

              console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å payload (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º):', comment);

              try {
                await tonConnectUI.sendTransaction({
                  validUntil: Math.floor(Date.now() / 1000) + 600,
                  messages: [
                    {
                      address: 'UQDEUvNIMwUS03T-OknCGDhcKIADjY_hw5KRl0z8g41PKs87',
                      amount: nanoTON,
                      payload,
                    },
                  ],
                });
                console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ TON');
              }
            }}
          >
            –ü–æ–ø–æ–ª–Ω–∏—Ç—å TON
          </button>
        </div>

        <div className="profile-row">
          <button
            onClick={() => {
              const address = prompt('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:');
              const amount = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (TON):');

              if (!address || !amount) return;

              fetch('https://lottery-server-waif.onrender.com/users/withdraw', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  telegram_id: user.id,
                  address,
                  amount: parseFloat(amount),
                }),
              })
                .then((res) => res.json())
                .then((data) => alert(data.message || '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'))
                .catch(() => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞'));
            }}
          >
            –í—ã–≤–µ—Å—Ç–∏
          </button>
        </div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üë• –†–µ—Ñ–µ—Ä–∞–ª—ã</div>
        <div className="profile-row">–ö–æ–ª-–≤–æ: {referrals?.referral_count ?? 0}</div>
        <div className="profile-row">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrals?.referral_earnings ?? 0} TON</div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</div>
        <div className="profile-ref-wrapper">
          <input
            type="text"
            readOnly
            className="profile-ref-link"
            value={`https://t.me/FightForGift_bot?start=${user.id}`}
            onClick={(e) => e.target.select()}
          />
          <button onClick={handleCopyRefLink} className="copy-btn">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å üîó</button>
        </div>
      </div>

      <div className="profile-block">
        <div className="profile-title">üïò –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤</div>
        <ul className="profile-history-list">
          {purchases.length === 0 && <li>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</li>}
          {purchases.map((item, i) => (
            <li key={i}>
              {item.amount} –±–∏–ª–µ—Ç–∞(–æ–≤) ‚Äî {new Date(item.created_at).toLocaleString()}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}
