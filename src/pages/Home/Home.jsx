import { useEffect, useState, useRef, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import lottie from 'lottie-web';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './Home.css';

function Home() {
  const [wheels, setWheels] = useState([]);
  const [colorsMap, setColorsMap] = useState({});
  const [loadingId, setLoadingId] = useState(null);

  const navigate = useNavigate();

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∏–Ω—Å—Ç–∞–Ω—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ"
  const containerRefs = useRef({});          // id -> div
  const animRefs = useRef({});               // id -> lottie instance
  const playedOnceRef = useRef({});          // id -> true/false
  const observerRef = useRef(null);

  // –ö—ç—à JSON –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ nft_name
  const animCacheRef = useRef(new Map());

  // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ —Å–ª–∞–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç)
  const isLowEnd = useMemo(() => {
    const dm = navigator.deviceMemory || 4;
    return dm <= 2;
  }, []);

  const handleOpenLobby = (wheelId) => navigate(`/lobby/${wheelId}`);

  const fetchWheels = async () => {
    const { data, error } = await supabase.from('wheels').select('*');
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–µ—Å:', error);
      toast.error('Error loading wheels');
      return;
    }
    const activeWheels = (data || []).filter((w) => w.status === 'active');
    const wheelsWithParticipants = await Promise.all(
      activeWheels.map(async (wheel) => {
        const { count, error: countError } = await supabase
          .from('wheel_participants')
          .select('*', { count: 'exact', head: true })
          .eq('wheel_id', wheel.id);
        if (countError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', countError);
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
          return { ...wheel, participants: 0 };
        }
        return { ...wheel, participants: count || 0 };
      })
    );
    setWheels(wheelsWithParticipants);
  };

  useEffect(() => { fetchWheels(); }, []);

  useEffect(() => {
    fetch('/animations/colors.json')
      .then((res) => res.json())
      .then((data) => setColorsMap(data))
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤:', err);
        toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤');
      });
  }, []);

  async function getAnimationJSON(nftName) {
    if (animCacheRef.current.has(nftName)) return animCacheRef.current.get(nftName);
    const res = await fetch(`/animations/${nftName}.json`);
    if (!res.ok) throw new Error(`Animation not found: ${nftName}`);
    const json = await res.json();
    animCacheRef.current.set(nftName, json);
    return json;
  }

  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ 1 —Ä–∞–∑ –∏ pause –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    lottie.setQuality('low');

    const destroyAll = () => {
      Object.values(animRefs.current).forEach((inst) => {
        try { inst?.destroy?.(); } catch {}
      });
      animRefs.current = {};
    };

    observerRef.current = new IntersectionObserver(async (entries) => {
      for (const entry of entries) {
        const el = entry.target;
        const wheelId = el.getAttribute('data-wheelid');
        const nftName = el.getAttribute('data-nftname');
        if (!wheelId || !nftName) continue;

        // –£–∂–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª–∏ ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (playedOnceRef.current[wheelId]) {
          animRefs.current[wheelId]?.pause?.();
          continue;
        }

        // –í–Ω–µ —ç–∫—Ä–∞–Ω–∞ ‚Äî –ø–∞—É–∑–∞ (–µ—Å–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω)
        if (!entry.isIntersecting) {
          animRefs.current[wheelId]?.pause?.();
          continue;
        }

        // –í —ç–∫—Ä–∞–Ω–µ –∏ –µ—â—ë –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª–∏
        if (!animRefs.current[wheelId]) {
          try {
            const data = await getAnimationJSON(nftName);
            const inst = lottie.loadAnimation({
              container: el,
              renderer: 'canvas', // –±—ã—Å—Ç—Ä–µ–µ svg –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
              loop: false,        // –æ–¥–∏–Ω —Ä–∞–∑
              autoplay: false,    // –∑–∞–ø—É—Å—Ç–∏–º –≤—Ä—É—á–Ω—É—é
              animationData: data,
              rendererSettings: { progressiveLoad: true, clearCanvas: true }
            });
            inst.setSpeed(isLowEnd ? 0.8 : 1);

            // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–º–µ—á–∞–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–∞–¥—Ä–µ (–∏–ª–∏ –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π ‚Äî —Å–º. –Ω–∏–∂–µ)
            inst.addEventListener('complete', () => {
              playedOnceRef.current[wheelId] = true;
              inst.pause(); // –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–∞–¥—Ä–µ
              // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä:
              // inst.goToAndStop(0, true);
            });

            animRefs.current[wheelId] = inst;
          } catch (e) {
            console.error('Lottie load error', nftName, e);
            continue;
          }
        }

        // –°—Ç–∞—Ä—Ç—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª–∏
        if (!playedOnceRef.current[wheelId]) {
          animRefs.current[wheelId].goToAndStop(0, true); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
          animRefs.current[wheelId].play();
        }
      }
    }, { threshold: 0.2, rootMargin: '120px 0px' });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
    Object.values(containerRefs.current).forEach((el) => {
      if (el) observerRef.current.observe(el);
    });

    return () => {
      observerRef.current?.disconnect();
      destroyAll();
    };
  }, [wheels, isLowEnd]);

  const handleJoin = async (wheel) => {
    const tg = window.Telegram?.WebApp;
    const user = tg?.initDataUnsafe?.user;

    if (!user) {
      toast.error('Telegram user not found');
      return;
    }
    if (wheel.participants >= wheel.size) {
      toast.warn('The wheel is already full');
      return;
    }

    setLoadingId(wheel.id);

    const { data: foundUser, error } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', user.id)
      .single();

    if (error || !foundUser) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      setLoadingId(null);
      return;
    }

    const res = await fetch('https://lottery-server-waif.onrender.com/wheel/join', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        wheel_id: wheel.id,
        user_id: foundUser.id,
        telegram_id: user.id,
        username: user.username || '',
      }),
    });

    if (res.status === 201) {
      toast.success('You have successfully joined!');
      await fetchWheels();
    } else {
      const err = await res.json();
      toast.error(err.error || 'Error Join');
    }

    setLoadingId(null);
  };

  return (
    <div className="home-wrapper">
      {wheels.length === 0 ? (
        <p style={{ color: 'white', textAlign: 'center', marginTop: '50px' }}>
          Loading...
        </p>
      ) : (
        <div className="wheels-grid">
          {wheels.map((wheel) => {
            const bg = colorsMap[wheel.nft_name]
              ? `linear-gradient(135deg, ${colorsMap[wheel.nft_name].center_color}, ${colorsMap[wheel.nft_name].edge_color})`
              : '#000';

            return (
              <div key={wheel.id} className="wheel-card">
                <div className="wheel-title">{wheel.nft_name}</div>

                <div
                  className="wheel-image"
                  style={{
                    background: bg,
                    borderRadius: '10px',
                    position: 'relative',
                    overflow: 'hidden',
                  }}
                >
                  {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥ Lottie. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –∏–≥—Ä–∞–µ—Ç 1 —Ä–∞–∑ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ */}
                  <div
                    ref={(el) => {
                      if (!el) return;
                      containerRefs.current[wheel.id] = el;
                      el.setAttribute('data-wheelid', String(wheel.id));
                      el.setAttribute('data-nftname', wheel.nft_name);
                      if (observerRef.current) observerRef.current.observe(el);
                    }}
                    style={{
                      position: 'absolute',
                      width: '100%',
                      height: '100%',
                      top: 0,
                      left: 0,
                    }}
                  />
                </div>

                <div className="wheel-buttons">
                  <button className="lobby-button" onClick={() => handleOpenLobby(wheel.id)}>
                    Lobby
                  </button>
                  <button
                    className="join-button"
                    onClick={() => handleJoin(wheel)}
                    disabled={loadingId === wheel.id || wheel.participants >= wheel.size}
                  >
                    {loadingId === wheel.id ? 'Joining...' : 'JOIN'}
                  </button>
                </div>

                <div className="wheel-info">
                  <span>Players: {wheel.participants}/{wheel.size}</span>
                  <span>
                    Price: {wheel.price} <span className="diamond">üíé</span>
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      )}

      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={true}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
    </div>
  );
}

export default Home;
