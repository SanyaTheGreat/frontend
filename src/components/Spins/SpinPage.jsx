import React, { useEffect, useMemo, useRef, useState } from "react";
import {
  fetchCases,
  fetchCaseChance,
  getTelegramId,
  postClaim,
  postReroll,
  postSpin,
  fetchInventory,            // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
} from "./spinsApi";
import { supabase } from "../../supabaseClient"; // –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
import SpinWheel from "./SpinWheel";
import SpinControls from "./SpinControls";
import "./spins.css";

export default function SpinPage() {
  const [cases, setCases] = useState([]);
  const [index, setIndex] = useState(0); // –∞–∫—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å
  const [chances, setChances] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const [spinning, setSpinning] = useState(false);
  const [animDone, setAnimDone] = useState(false); // —Ñ–ª–∞–≥ –∫–æ–Ω—Ü–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
  const [targetId, setTargetId] = useState(null);
  const [spinId, setSpinId] = useState(null);
  const [result, setResult] = useState(null); // {status, prize?}
  const [showModal, setShowModal] = useState(false);

  const [balance, setBalance] = useState({ stars: 0, tickets: 0 });
  const telegramIdRef = useRef(getTelegramId());

  // –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã fx_rates
  const [fx, setFx] = useState({ stars_per_ton: 0, ton_per_100stars: 0, fee_markup: 0 });

  // —Ç–æ—Å—Ç –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
  const [toast, setToast] = useState(null); // { text: string } | null

  // –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: —Å—á—ë—Ç—á–∏–∫ –∏ —Ñ–ª–∞–≥ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞)
  const [invCount, setInvCount] = useState(0);

  const activeCase = cases[index] || null;

  // –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤
  useEffect(() => {
    (async () => {
      try {
        const cs = await fetchCases();
        setCases(cs.filter((c) => c.is_active));
      } catch (e) {
        setError(e.message);
      }
    })();
  }, []);

  // –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤
  useEffect(() => {
    (async () => {
      try {
        const { data, error } = await supabase
          .from("fx_rates")
          .select("stars_per_ton, ton_per_100stars, fee_markup")
          .eq("id", 1)
          .maybeSingle();

        if (error) {
          console.warn("[fx_rates] select error:", error);
          return;
        }
        if (!data) {
          console.warn("[fx_rates] no rows (RLS policy?)");
          return;
        }

        setFx({
          stars_per_ton: Number(data.stars_per_ton || 0),
          ton_per_100stars: Number(data.ton_per_100stars || 0),
          fee_markup: Number(data.fee_markup || 0),
        });
      } catch (e) {
        console.warn("[fx_rates] unexpected error:", e);
      }
    })();
  }, []);

  // –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–Ω—Å–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞
  useEffect(() => {
    (async () => {
      if (!activeCase) return;
      setLoading(true);
      try {
        const list = await fetchCaseChance(activeCase.id);
        // –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—è: id, nft_name, slug, percent, payout_value, price, is_active
        const onlyActive = list.filter((x) => x.is_active);
        setChances(
          onlyActive.map((x) => ({
            id: x.id,
            label: x.nft_name,
            slug: x.slug || (x.nft_name || "").toLowerCase().replaceAll(" ", "-"),
            percent: Number(x.percent || 0),
            price: Number(x.price || 0), // TON (fallback)
            payout_value: Number(x.payout_value || 0), // TON –¥–ª—è –æ–±–º–µ–Ω–∞
          }))
        );
      } catch (e) {
        setError(e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [activeCase?.id]);

  // –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    (async () => {
      const tgId = telegramIdRef.current;
      if (!tgId) return;
      const { data } = await supabase
        .from("users")
        .select("stars, tickets")
        .eq("telegram_id", tgId)
        .single();
      if (data) setBalance({ stars: Number(data.stars || 0), tickets: Number(data.tickets || 0) });
    })();
  }, [telegramIdRef.current]);

  const priceTon = useMemo(() => Number(activeCase?.price || 0), [activeCase]);
  const priceStars = useMemo(() => Number(activeCase?.price_in_stars || 0), [activeCase]);
  const allowStars = !!activeCase?.allow_stars;

  // –º–æ–¥–∞–ª–∫–∞: –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
  useEffect(() => {
    if (animDone && result) setShowModal(true);
  }, [animDone, result]);

  // –∑–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const loadInvCount = useMemo(
    () => async () => {
      const tgId = telegramIdRef.current;
      if (!tgId) return;
      try {
        const items = await fetchInventory(tgId);
        setInvCount(items.length || 0);
      } catch (e) {
        console.warn("[inventory] count failed:", e?.message || e);
      }
    },
    [telegramIdRef]
  );

  useEffect(() => {
    loadInvCount();
  }, [loadInvCount]);

  // –∑–∞–ø—É—Å–∫ —Å–ø–∏–Ω–∞
  async function handleSpin() {
    if (!activeCase) return;
    setError("");
    setResult(null);
    setSpinning(true);
    setAnimDone(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    setTargetId(null);
    setSpinId(null);
    setShowModal(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É

    try {
      const payload = {
        case_id: activeCase.id,
        telegram_id: telegramIdRef.current,
        pay_with: allowStars ? "stars" : "tickets",
      };
      const resp = await postSpin(payload);
      // resp: { spin_id, status: 'pending'|'lose', prize?{chance_id,...} }
      setSpinId(resp.spin_id);

      if (resp.status === "lose") {
        const loseSeg =
          chances.find(
            (s) => s.label?.toLowerCase() === "lose" || s.slug?.toLowerCase() === "lose"
          ) || chances[0];
        setTargetId(loseSeg?.id || null);
        setResult({ status: "lose" });
      } else {
        setTargetId(resp.prize?.chance_id || null);
        setResult({ status: "pending", prize: resp.prize });
        // –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç ¬´–ø–æ–∑–∂–µ¬ª;
        // —Å—á—ë—Ç—á–∏–∫ –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (claim/reroll) –∏–ª–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
      }

      // –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
      const { data } = await supabase
        .from("users")
        .select("stars, tickets")
        .eq("telegram_id", telegramIdRef.current)
        .single();
      if (data) setBalance({ stars: Number(data.stars || 0), tickets: Number(data.tickets || 0) });
    } catch (e) {
      setError(e.message);
      setSpinning(false);
      setAnimDone(true); // –∞–≤–∞—Ä–∏–π–Ω–æ —Å—á–∏—Ç–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å
    }
  }

  // –∫–æ–Ω–µ—Ü –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –∫–æ–ª–µ—Å–∞
  function handleSpinEnd() {
    setSpinning(false);
    setAnimDone(true);
  }

  async function handleClaim() {
    if (!spinId) return;
    try {
      const resp = await postClaim(spinId);
      if (resp?.status === "reward_sent") {
        setResult((r) => ({ ...r, status: "reward_sent" }));
        setShowModal(false); // –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–∏
        loadInvCount(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
      }
    } catch (e) {
      setError(e.message);
    }
  }

  // –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ —Ç–æ—Å—Ç–µ
  async function handleReroll(labelFromUI) {
    if (!spinId) return;
    try {
      const resp = await postReroll(spinId);
      setResult((r) => ({ ...r, status: "reroll", reroll: resp }));
      setShowModal(false); // –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞

      // —Ç–æ—Å—Ç: "–£—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ –Ω–∞ N ..." ‚Äî –±–µ—Ä—ë–º N –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
      if (labelFromUI) {
        const amountText = String(labelFromUI).replace(/^–û–±–º–µ–Ω—è—Ç—å –Ω–∞\s*/i, "").trim();
        setToast({ text: `–£—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ –Ω–∞ ${amountText}` });
      }
      setTimeout(() => setToast(null), 2000);

      loadInvCount(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫

      // –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
      const { data } = await supabase
        .from("users")
        .select("stars, tickets")
        .eq("telegram_id", telegramIdRef.current)
        .single();
      if (data) setBalance({ stars: Number(data.stars || 0), tickets: Number(data.tickets || 0) });
    } catch (e) {
      setError(e.message);
    }
  }

  // —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–ª–µ—Å–∞
  const wheelSegments = useMemo(() => chances, [chances]);

  // –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∑–≤—ë–∑–¥—ã —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ
  const displayBalance = allowStars ? Math.floor(balance.stars) : `${balance.tickets} TON`;

  return (
    <>
      {/* –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É (–Ω–∞–ø—Ä–æ—Ç–∏–≤ –±–∞–ª–∞–Ω—Å–∞) */}
      <button
        type="button"
        className="inventory-badge"
        onClick={() => {
          // –æ—Ç–∫—Ä–æ–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–∑–∂–µ; –ø–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–≥—Ä—É–∑–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫
          loadInvCount();
        }}
        aria-label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
      >
        üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å{invCount ? ` (${invCount})` : ""}
      </button>

      {/* –ë–∞–ª–∞–Ω—Å –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
      <div
        style={{
          position: "fixed",
          top: 12,
          right: 12,
          zIndex: 1000,
          background: "rgba(0,0,0,0.5)",
          borderRadius: 20,
          padding: "6px 12px",
          color: "#fff",
          fontWeight: 700,
          fontSize: 14,
          display: "flex",
          alignItems: "center",
          gap: 6,
        }}
      >
        {allowStars ? `‚≠ê ${displayBalance}` : displayBalance}
      </div>

      <div className="spins-page">
        {/* Header */}
        <div className="spins-header">
          <div style={{ fontWeight: 800, fontSize: 18 }}></div>
        </div>

        {/* –ö–æ–ª–µ—Å–æ + —Ç–æ—Å—Ç –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ */}
        <div className="wheel-zone">
          <SpinWheel
            segments={wheelSegments}
            targetId={targetId}
            isSpinning={spinning}
            onSpinEnd={handleSpinEnd}
          />
          {toast && <div className="spin-toast spin-toast--on-wheel">{toast.text}</div>}
        </div>

        {/* –ü–æ–ª–∑—É–Ω–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–∞ */}
        <CaseRange count={cases.length} index={index} onChange={setIndex} />

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <SpinControls
          allowStars={allowStars}
          priceTon={priceTon}
          priceStars={priceStars}
          balanceStars={balance.stars}
          balanceTickets={balance.tickets}
          spinning={spinning}
          onSpin={handleSpin}
        />

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
        {result && showModal && (
          <ResultBlock
            result={result}
            chances={chances}
            allowStars={allowStars}
            starsPerTon={fx.stars_per_ton}
            feeMarkup={fx.fee_markup}
            onClaim={handleClaim}
            onReroll={handleReroll}
          />
        )}

        {error && (
          <div className="result-banner" style={{ background: "#3b1e1e", color: "#ffb4b4" }}>
            {error}
          </div>
        )}
      </div>
    </>
  );
}

/* –ü–æ–ª–∑—É–Ω–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–∞ ‚Äî —Ç–æ—á–∫–∏ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–π */
function CaseRange({ count, index, onChange }) {
  if (!count) return null;
  return (
    <div style={{ padding: "6px 8px 2px" }}>
      <input
        type="range"
        min={0}
        max={count - 1}
        step={1}
        value={index}
        onChange={(e) => onChange(Number(e.target.value))}
        className="case-range"
      />
      <div className="case-range-dots">
        {Array.from({ length: count }).map((_, i) => (
          <span key={i} className={`dot ${i === index ? "active" : ""}`} />
        ))}
      </div>
    </div>
  );
}

/* –ë–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ–±–º–µ–Ω–∞ */
function ResultBlock({ result, chances, allowStars, starsPerTon, feeMarkup = 0, onClaim, onReroll }) {
  if (result.status === "lose") {
    return <div className="result-banner">–ù–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!</div>;
  }

  if (result.status === "pending") {
    const ch = chances.find((x) => x.id === result.prize?.chance_id);

    // –±–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –≤ TON: –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ > 0 –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    const candidates = [
      ch?.payout_value,
      ch?.price,
      result.prize?.payout_value,
      result.prize?.price,
    ].map((v) => Number(v));
    const baseTon = candidates.find((v) => Number.isFinite(v) && v > 0) || 0;

    // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON -> ‚≠ê —Å —É—á—ë—Ç–æ–º fee_markup (—É–º–µ–Ω—å—à–∞–µ–º –≤—ã–¥–∞—á—É)
    const starsAmount = Math.max(
      0,
      Math.ceil(baseTon * (starsPerTon || 0) * (1 - (feeMarkup || 0)))
    );

    const exchangeLabel = allowStars
      ? `–û–±–º–µ–Ω—è—Ç—å –Ω–∞ ${starsAmount} ‚≠ê`
      : `–û–±–º–µ–Ω—è—Ç—å –Ω–∞ ${baseTon} TON`;

    return (
      <div className="result-banner" style={{ display: "grid", gap: 8 }}>
        <div style={{ display: "flex", alignItems: "center", gap: 10 }}>
          <img src={`/animations/${ch?.slug}.png`} alt="prize" width={40} height={40} />
          <div style={{ fontWeight: 700 }}>–í—ã–ø–∞–ª–æ: {ch?.label || result.prize?.nft_name}</div>
        </div>
        <div className="result-cta">
          <button className="primary-btn" onClick={onClaim}>
            –ó–∞–±—Ä–∞—Ç—å
          </button>
          <button className="ghost-btn" onClick={() => onReroll(exchangeLabel)}>
            {exchangeLabel}
          </button>
        </div>
      </div>
    );
  }

  if (result.status === "reward_sent") {
    return <div className="result-banner">–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å Telegram üéÅ</div>;
  }

  if (result.status === "reroll") return null;

  return null;
}
